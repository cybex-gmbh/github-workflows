name: Boot a staging environment using PullPreview

on:
  workflow_call:
    inputs:
      PULLPREVIEW_ADMINS:
        description: A comma separated list of users which will have SSH access to the Lightsail instance.
        required: false
        default: "@collaborators/push"
        type: string
      INSTANCE_TYPE:
        description: The Lightsail instance type used for the staging environment.
        required: false
        default: nano
        type: string
      ARTIFACT_NAME:
        description: The name of an Artifact which will be extracted while preserving file paths.
        required: false
        type: string
      DOMAIN:
        description: A custom domain which will be used for the preview environment.
        required: false
        type: string
      MAX_DOMAIN_LENGTH:
        description:
          The maximum length which will be used for the fully qualified domain name. 
          The subdomain created by PullPreview will be shortened so that it fits into the specified maximum length.
        required: false
        type: number
      ENV_BASE_FILE_NAME:
        description: The name of the .env file which will be used as base to generate the ENV_FILE_NAME file.
        required: false
        default: .env.example
        type: string
      ENV_FILE_NAME:
        description: The name of the .env file in which the passed ENV_VARS will be echoed.
        required: false
        default: .env
        type: string
      SHUTDOWN_AFTER:
        description: The TTL for the PullPreview deployment (e.g. "10h", "5d", "infinite").
        required: false
        default: "1d"
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        description: The Docker Hub username.
        required: false
      DOCKERHUB_TOKEN_READONLY:
        description: A read-only token to download images from private repositories.
        required: false
      ENV_VARS:
        description: Variables which should be written into the .env file.
        required: false
      PULLPREVIEW_BASIC_AUTH:
        description: The Basic Authentication credentials in a htpasswd format.
        required: false
      PULLPREVIEW_AWS_ACCESS_KEY_ID:
        description: An AWS Access Key ID with permissions to manage Lightsail instances.
        required: true
      PULLPREVIEW_AWS_SECRET_ACCESS_KEY:
        description: An AWS Secret Access Key with permissions to manage Lightsail instances.
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read # to fetch code (actions/checkout)
      deployments: write # to delete deployments
      pull-requests: write # to remove labels
      statuses: write # to create commit status
    outputs:
      PULLPREVIEW_URL: ${{ steps.pullpreview.outputs.url }}
      PULLPREVIEW_HOST: ${{ steps.pullpreview.outputs.host }}
      PULLPREVIEW_USERNAME: ${{ steps.pullpreview.outputs.username }}

    steps:
      - name: Checkout GitHub repository
        if: ${{ contains(github.event.pull_request.labels.*.name, 'pullpreview') && github.event.action != 'unlabeled' && github.event.action != 'closed' }}
        # https://github.com/actions/checkout
        uses: actions/checkout@v4

      - name: Generate .env and .htpasswd file
        if: ${{ contains(github.event.pull_request.labels.*.name, 'pullpreview') && github.event.action != 'unlabeled' && github.event.action != 'closed' }}
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
          ENV_BASE_FILE_NAME: ${{ inputs.ENV_BASE_FILE_NAME }}
          ENV_FILE_NAME: ${{ inputs.ENV_FILE_NAME }}
          BASIC_AUTH: ${{ secrets.PULLPREVIEW_BASIC_AUTH }}
        run: |
          cp -n "$ENV_BASE_FILE_NAME" "$ENV_FILE_NAME"
          echo "APP_ENV=production" >> "$ENV_FILE_NAME"
          echo "APP_DEBUG=false" >> "$ENV_FILE_NAME"
          for keyValuePair in $ENV_VARS; do
            echo "$keyValuePair" >> "$ENV_FILE_NAME"
          done
          echo "$BASIC_AUTH" > .htpasswd

      - name: Download passed artifact.
        if: ${{ inputs.ARTIFACT_NAME && contains(github.event.pull_request.labels.*.name, 'pullpreview') && github.event.action != 'unlabeled' && github.event.action != 'closed' }}
        # https://github.com/actions/download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.ARTIFACT_NAME }}

      - name: Delete passed artifact.
        if: ${{ inputs.ARTIFACT_NAME }}
        # https://github.com/GeekyEggo/delete-artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ${{ inputs.ARTIFACT_NAME }}

      - name: Boot PullPreview staging environment
        if: ${{ contains(github.event.pull_request.labels.*.name, 'pullpreview') || github.event.action == 'unlabeled' || github.event.action == 'closed' }}
        id: pullpreview
        # https://github.com/pullpreview/action
        uses: pullpreview/action@v5
        with:
          registries: ${{ env.SHOULD_LOGIN_TO_DOCKER && env.DOCKER_REGISTRY_URI || '' }}
          # Those GitHub users will have SSH access to the servers
          admins: ${{ inputs.PULLPREVIEW_ADMINS }}
          # Use the cidrs option to restrict access to the live environments to specific IP ranges
          cidrs: "0.0.0.0/0"
          compose_files: compose.pullpreview.yml
          # The preview URL will target this port
          default_port: 80
          # Use a 512MB RAM instance type instead of the default 2GB
          instance_type: ${{ inputs.INSTANCE_TYPE }}
          # Ports to open on the server
          ports: 80, 443
          # Use a custom domain for the preview environment
          dns: ${{ inputs.DOMAIN && inputs.DOMAIN || 'my.preview.run' }}
          # Maximum length of fully qualified domain name. Cannot be greater than 62 characters.
          max_domain_length: ${{ inputs.MAX_DOMAIN_LENGTH }}
          ttl: ${{ inputs.SHUTDOWN_AFTER }}
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.PULLPREVIEW_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.PULLPREVIEW_AWS_SECRET_ACCESS_KEY }}"
          AWS_REGION: "eu-central-1"
          SHOULD_LOGIN_TO_DOCKER: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN_READONLY }}
          DOCKER_REGISTRY_URI: docker://${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN_READONLY }}@docker.io

  comment-connection-information:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'pullpreview') && github.event.action != 'unlabeled' && github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: deploy

    steps:
      - name: Find Comment
        # https://github.com/peter-evans/find-comment
        uses: peter-evans/find-comment@v3
        id: find
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: ssh ${{ needs.deploy.outputs.PULLPREVIEW_USERNAME }}@

      - name: Create or update comment
        # https://github.com/peter-evans/create-or-update-comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ssh ${{ needs.deploy.outputs.PULLPREVIEW_USERNAME }}@${{ needs.deploy.outputs.PULLPREVIEW_HOST }}
            URL: ${{ needs.deploy.outputs.PULLPREVIEW_URL }}
          edit-mode: replace


